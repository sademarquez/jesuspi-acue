document.addEventListener('DOMContentLoaded', function () {
    // --- Elementos del DOM ---
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const header = document.getElementById('main-header');
    const sections = document.querySelectorAll('main section');
    const navLinks = document.querySelectorAll('.nav-link');
    const contentGrid = document.getElementById('content-grid');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const currentYearSpan = document.getElementById('current-year');

    // --- Carrusel (Trayectoria) ---
    const carouselTrack = document.getElementById('carousel-track');
    const carouselPrev = document.getElementById('carousel-prev');
    const carouselNext = document.getElementById('carousel-next');
    const carouselDotsContainer = document.getElementById('carousel-dots');
    let currentIndex = 0;
    let autoSlideInterval;
    let startX = 0; // Para el swipe en móviles

    // Datos del carrusel (ubicados aquí para que JS los maneje directamente, se pueden mover a content.json si se desea)
    const carouselContentData = [
        { title: "Nacimiento", description: "Viene al mundo en el seno del pueblo Nasa, en el Cauca.", year: "1980", image: "timeline-1980.jpg" },
        { title: "Activismo Juvenil", description: "Inicia su participación en movimientos estudiantiles y comunitarios, forjando su liderazgo.", year: "1990s", image: "timeline-1990s.jpg" },
        { title: "Liderazgo Comunitario", description: "Asume roles importantes en su comunidad, promoviendo la autonomía y el desarrollo.", year: "2000s", image: "timeline-2000s.jpg" },
        { title: "Incidencia Política Nacional", description: "Participa en foros y mesas de diálogo nacionales, defendiendo los derechos indígenas.", year: "2010s", image: "timeline-2010s.jpg" },
        { title: "Actualidad", description: "Continúa su incansable labor por la equidad, la interculturalidad y la justicia social en Colombia.", year: "Hoy", image: "timeline-actualidad.jpg" }
    ];

    // --- Funciones del Menú Móvil ---
    if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
            // Toggle aria-expanded for accessibility
            const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true' || false;
            mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
        });
        document.querySelectorAll('#mobile-menu a').forEach(link => {
            link.addEventListener('click', () => {
                mobileMenu.classList.add('hidden'); // Cierra el menú al hacer clic en un enlace
                mobileMenuButton.setAttribute('aria-expanded', 'false'); // Reset aria-expanded
            });
        });
    }

    // --- Efecto de Sombra en Header al hacer Scroll ---
    if (header) {
        window.addEventListener('scroll', () => {
            if (window.scrollY > 50) {
                header.classList.add('shadow-lg');
            } else {
                header.classList.remove('shadow-lg');
            }
        });
    }

    // --- Observador para animaciones de sección y navegación activa ---
    const sectionObserverOptions = {
        root: null, // Observa el viewport
        rootMargin: '0px',
        threshold: 0.1 // La sección es visible al 10% (aparición casi inmediata)
    };

    const sectionObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible'); // Añadir clase 'visible' para animación de entrada

                // Actualizar enlace de navegación activo
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href').substring(1) === entry.target.id) {
                        link.classList.add('active');
                    }
                });
            } else {
                // Optional: remove 'visible' class if you want sections to re-animate when scrolled back into view
                // entry.target.classList.remove('visible');
            }
        });
    }, sectionObserverOptions);

    sections.forEach(section => {
        sectionObserver.observe(section);
        // Activate animation if section is already in viewport on page load
        if (section.getBoundingClientRect().top < window.innerHeight) {
            section.classList.add('visible');
        }
    });

    // --- Carga dinámica de contenido 'Pensamiento y Acción' y Lazy Loading ---
    let allContentData = []; // Para almacenar todos los datos cargados una vez

    if (contentGrid) {
        fetch('content.json') // Correct path assumed
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                allContentData = data; // Guarda todos los datos
                loadContent(data); // Carga el contenido inicial
            })
            .catch(error => {
                console.error('Error al cargar el contenido:', error);
                if (contentGrid) {
                    contentGrid.innerHTML = '<p class="text-center text-red-500">No se pudo cargar el contenido. Por favor, inténtalo de nuevo más tarde.</p>';
                }
            });
    }

    function loadContent(dataToDisplay) {
        if (!contentGrid) return; // Exit if contentGrid is not found

        contentGrid.innerHTML = ''; // Limpiar grid
        const fragment = document.createDocumentFragment();

        dataToDisplay.forEach((item, index) => {
            const card = document.createElement('div');
            card.className = `content-card ${item.category}`; // Classes for animation and filter
            card.setAttribute('data-category', item.category);
            card.style.setProperty('--delay', `${index * 0.08}s`); // Staggered delay of 80ms

            card.innerHTML = `
                <div class="bg-white rounded-lg shadow-lg overflow-hidden h-full flex flex-col">
                    <img data-src="${item.image}" 
                         onerror="this.onerror=null;this.src='https://via.placeholder.com/600x400.png?text=Imagen+no+disponible';this.alt='Imagen no disponible';" 
                         alt="Imagen representativa de un ${item.category}" 
                         class="w-full h-48 object-cover lazyload" loading="lazy">
                    <div class="p-6 flex-grow flex flex-col justify-between">
                        <div>
                            <span class="inline-block bg-muted-gold text-dark-gold text-xs font-semibold px-3 py-1 rounded-full mb-2">${item.category.charAt(0).toUpperCase() + item.category.slice(1)}</span>
                            <h3 class="text-xl font-bold mb-2 text-deep-charcoal">${item.title}</h3>
                            <p class="text-deep-charcoal text-base mb-4">${item.description}</p>
                        </div>
                        <a href="${item.link}" class="inline-block text-dark-gold font-semibold hover:underline mt-auto">Leer Más &rarr;</a>
                    </div>
                </div>
            `;
            fragment.appendChild(card);
        });

        contentGrid.appendChild(fragment);

        // Observer for Lazy Loading of content cards images
        const contentCardImageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target.querySelector('img.lazyload');
                    if (img && img.dataset.src) {
                        img.src = img.dataset.src;
                        img.classList.remove('lazyload');
                        img.removeAttribute('data-src');
                    }
                    observer.unobserve(entry.target); // Stop observing once loaded
                }
            });
        }, { threshold: 0.1 }); // Trigger when 10% of the image is visible

        document.querySelectorAll('.content-card').forEach(card => {
            contentCardImageObserver.observe(card);
        });
    }

    // --- Filtros de contenido ---
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Remove 'active' class from all buttons
            filterButtons.forEach(btn => {
                btn.classList.remove('active', 'bg-dark-gold');
                btn.classList.add('bg-deep-charcoal'); // Revert to inactive color
            });
            // Add 'active' class to the clicked button
            button.classList.add('active', 'bg-dark-gold');
            button.classList.remove('bg-deep-charcoal'); // Remove inactive color

            const category = button.dataset.category;
            const filteredData = category === 'all' ? allContentData : allContentData.filter(item => item.category === category);
            loadContent(filteredData);
        });
    });
    // Activate the "Todos" button by default on page load
    const defaultFilterButton = document.querySelector('.filter-btn[data-category="all"]');
    if (defaultFilterButton) {
        defaultFilterButton.click();
    }


    // --- Lógica del Carrusel (Trayectoria) ---
    function initializeCarousel() {
        if (!carouselTrack || carouselContentData.length === 0) {
            // Handle case where there's no carousel or data. Display static image.
            if (carouselTrack) {
                carouselTrack.innerHTML = `<div class="w-full h-full bg-cover bg-center" style="background-image: url('images/hero-bg.jpg');" role="img" aria-label="Imagen de fondo principal de Jesús Piñacué Achicué"></div>`;
                // Hide controls if no carousel
                if (carouselPrev) carouselPrev.style.display = 'none';
                if (carouselNext) carouselNext.style.display = 'none';
                if (carouselDotsContainer) carouselDotsContainer.style.display = 'none';
            }
            return;
        }

        carouselTrack.innerHTML = '';
        carouselDotsContainer.innerHTML = '';

        carouselContentData.forEach((item, index) => {
            const slide = document.createElement('div');
            slide.className = 'w-full flex-shrink-0 h-full relative'; // Added relative for positioning inner content
            slide.style.backgroundImage = `url('images/${item.image}')`; // Correct image path
            slide.setAttribute('role', 'group');
            slide.setAttribute('aria-roledescription', 'slide');
            slide.setAttribute('aria-label', `${index + 1} of ${carouselContentData.length}`);

            slide.innerHTML = `
                <div class="absolute inset-0 bg-deep-charcoal bg-opacity-60 flex items-center justify-center p-6 text-center text-white">
                    <div class="p-4 rounded-lg">
                        <h3 class="text-3xl md:text-5xl font-bold mb-4 text-shadow">${item.title}</h3>
                        <p class="text-lg md:text-xl text-shadow">${item.description}</p>
                        <p class="text-xl md:text-2xl font-semibold mt-2 text-shadow">${item.year}</p>
                    </div>
                </div>
            `;
            carouselTrack.appendChild(slide);

            const dot = document.createElement('button');
            dot.className = 'w-3 h-3 bg-gray-400 rounded-full hover:bg-dark-gold transition-colors duration-200';
            dot.setAttribute('aria-label', `Ir al slide ${index + 1}`);
            dot.setAttribute('role', 'tab');
            dot.addEventListener('click', () => {
                goToSlide(index);
                resetAutoSlide();
            });
            carouselDotsContainer.appendChild(dot);
        });

        goToSlide(currentIndex); // Show the first slide
        startAutoSlide(); // Start auto-advance
    }

    function goToSlide(index) {
        if (index >= carouselContentData.length) currentIndex = 0;
        else if (index < 0) currentIndex = carouselContentData.length - 1;
        else currentIndex = index;
        
        carouselTrack.style.transform = `translateX(-${currentIndex * 100}%)`;

        // Update navigation dots
        carouselDotsContainer.querySelectorAll('button').forEach((dot, i) => {
            if (i === currentIndex) {
                dot.classList.add('active-dot');
                dot.classList.remove('bg-gray-400');
                dot.setAttribute('aria-selected', 'true');
            } else {
                dot.classList.remove('active-dot');
                dot.classList.add('bg-gray-400');
                dot.setAttribute('aria-selected', 'false');
            }
        });
    }

    // Carousel navigation functions
    const nextSlide = () => goToSlide(currentIndex + 1);
    const prevSlide = () => goToSlide(currentIndex - 1);

    if (carouselPrev) carouselPrev.addEventListener('click', () => { prevSlide(); resetAutoSlide(); });
    if (carouselNext) carouselNext.addEventListener('click', () => { nextSlide(); resetAutoSlide(); });

    // --- Swipe functionality for Carousel (Mobile) ---
    if (carouselTrack) {
        carouselTrack.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            clearInterval(autoSlideInterval); // Stop auto-advance on swipe start
        });

        carouselTrack.addEventListener('touchend', (e) => {
            const endX = e.changedTouches[0].clientX;
            const diffX = startX - endX; // Position difference
            const swipeThreshold = 50; // Minimum pixels for a swipe

            if (diffX > swipeThreshold) {
                // Swipe left (next slide)
                nextSlide();
            } else if (diffX < -swipeThreshold) {
                // Swipe right (prev slide)
                prevSlide();
            }
            startAutoSlide(); // Resume auto-advance after swipe
        });
    }
    
    // --- Auto-advance Carousel ---
    function startAutoSlide() {
        clearInterval(autoSlideInterval); // Clear any previous interval
        autoSlideInterval = setInterval(() => {
            nextSlide();
        }, 3000); // Change every 3 seconds
    }

    function resetAutoSlide() {
        clearInterval(autoSlideInterval);
        startAutoSlide();
    }

    // --- Initialize Carousel ---
    initializeCarousel();

    // --- Smooth scrolling for anchor links ---
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
                // Get header height for offset
                const headerHeight = header ? header.offsetHeight : 0;
                window.scrollTo({
                    top: targetElement.offsetTop - headerHeight,
                    behavior: 'smooth'
                });
                // If mobile menu is open, close it after clicking a link
                if (!mobileMenu.classList.contains('hidden')) {
                    mobileMenu.classList.add('hidden');
                    mobileMenuButton.setAttribute('aria-expanded', 'false');
                }
            }
        });
    });

    // Set current year in footer
    if (currentYearSpan) {
        currentYearSpan.textContent = new Date().getFullYear();
    }
});
