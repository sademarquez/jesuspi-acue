document.addEventListener('DOMContentLoaded', function () {
    // --- Elementos del DOM ---
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const header = document.getElementById('main-header');
    const sections = document.querySelectorAll('main section');
    const navLinks = document.querySelectorAll('.nav-link');

    // --- Carrusel (Trayectoria) ---
    const carouselTrack = document.getElementById('carousel-track');
    const carouselPrev = document.getElementById('carousel-prev');
    const carouselNext = document.getElementById('carousel-next');
    const carouselDotsContainer = document.getElementById('carousel-dots');
    let currentCarouselIndex = 0;
    let autoSlideInterval;
    let carouselContentData = []; // Data for Trayectoria carousel

    // --- Carrusel (Pensamiento y Acción) ---
    const contentCarouselTrack = document.getElementById('content-carousel-track');
    const contentCarouselPrev = document.getElementById('content-carousel-prev');
    const contentCarouselNext = document.getElementById('content-carousel-next');
    const contentCarouselDotsContainer = document.getElementById('content-carousel-dots');
    const filterButtons = document.querySelectorAll('.filter-btn');
    let currentContentCarouselIndex = 0;
    let contentData = []; // Data for Pensamiento y Acción content (all items)
    let filteredContentData = []; // To store currently filtered content for the carousel

    // --- Funciones del Carrusel (Trayectoria) ---
    function initializeCarousel() {
        console.log('Iniciando initializeCarousel (Trayectoria)...');
        if (!carouselTrack || !carouselDotsContainer || carouselContentData.length === 0) {
            console.warn("No se pudo inicializar el carrusel de Trayectoria: elementos DOM no encontrados o datos vacíos.");
            console.log('Estado actual - carouselTrack:', carouselTrack, 'carouselDotsContainer:', carouselDotsContainer, 'carouselContentData.length:', carouselContentData.length);
            return;
        }
        console.log('Inicializando carrusel de Trayectoria con', carouselContentData.length, 'elementos.');

        carouselTrack.innerHTML = ''; // Clear existing
        carouselDotsContainer.innerHTML = ''; // Clear existing dots

        carouselContentData.forEach((item, index) => {
            // Create slide item
            const slide = document.createElement('div');
            slide.className = 'carousel-slide flex-none relative'; // flex-none ensures it doesn't shrink
            // Width is now controlled by CSS (main.min.css)
            slide.innerHTML = `
                <img src="images/${item.image}" alt="${item.title}" class="w-full h-full object-cover rounded-lg">
                <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 text-white rounded-b-lg">
                    <h3 class="text-2xl font-bold">${item.title}</h3>
                    <p class="text-md">${item.description}</p>
                </div>
            `;
            carouselTrack.appendChild(slide);
            console.log(`Slide de Trayectoria ${index} añadido.`);

            // Create dot
            const dot = document.createElement('span');
            dot.className = 'carousel-dot w-3 h-3 bg-gray-400 rounded-full cursor-pointer transition-colors duration-200';
            if (index === 0) dot.classList.add('bg-white');
            dot.addEventListener('click', () => {
                moveToCarouselSlide(index);
                resetAutoSlide();
            });
            carouselDotsContainer.appendChild(dot);
        });

        // Add event listeners for prev/next buttons
        if(carouselPrev) carouselPrev.addEventListener('click', () => {
            moveToCarouselSlide(currentCarouselIndex - 1);
            resetAutoSlide();
        });
        if(carouselNext) carouselNext.addEventListener('click', () => {
            moveToCarouselSlide(currentCarouselIndex + 1);
            resetAutoSlide();
        });

        // Add swipe support for mobile (Trayectoria)
        let startX = 0;
        let isDragging = false;
        if(carouselTrack) {
            carouselTrack.addEventListener('mousedown', (e) => {
                isDragging = true;
                startX = e.clientX;
                carouselTrack.style.transition = 'none'; // Disable transition during drag
            });

            carouselTrack.addEventListener('mousemove', (e) => {
                if (!isDragging) return;
                const slideWidth = carouselTrack.firstElementChild ? carouselTrack.firstElementChild.offsetWidth : 0;
                const walk = (e.clientX - startX); // How far the mouse has been dragged
                carouselTrack.style.transform = `translateX(${-currentCarouselIndex * slideWidth + walk}px)`;
            });

            carouselTrack.addEventListener('mouseup', (e) => {
                if (!isDragging) return;
                isDragging = false;
                carouselTrack.style.transition = 'transform 0.7s ease-in-out'; // Re-enable transition
                const movedBy = e.clientX - startX;
                if (movedBy < -50) { // Swiped left
                    moveToCarouselSlide(currentCarouselIndex + 1);
                } else if (movedBy > 50) { // Swiped right
                    moveToCarouselSlide(currentCarouselIndex - 1);
                } else { // Not enough swipe, snap back
                    moveToCarouselSlide(currentCarouselIndex);
                }
                resetAutoSlide();
            });

            carouselTrack.addEventListener('mouseleave', () => {
                if (isDragging) {
                    isDragging = false;
                    carouselTrack.style.transition = 'transform 0.7s ease-in-out';
                    moveToCarouselSlide(currentCarouselIndex); // Snap back if mouse leaves while dragging
                    resetAutoSlide();
                }
            });

            // Touch events for mobile
            carouselTrack.addEventListener('touchstart', (e) => {
                startX = e.touches[0].clientX;
                carouselTrack.style.transition = 'none';
            }, { passive: true }); // Added passive: true

            carouselTrack.addEventListener('touchmove', (e) => {
                if (!startX) return;
                const slideWidth = carouselTrack.firstElementChild ? carouselTrack.firstElementChild.offsetWidth : 0;
                const walk = (e.touches[0].clientX - startX);
                carouselTrack.style.transform = `translateX(${-currentCarouselIndex * slideWidth + walk}px)`;
            }, { passive: true }); // Added passive: true

            carouselTrack.addEventListener('touchend', (e) => {
                carouselTrack.style.transition = 'transform 0.7s ease-in-out';
                const movedBy = e.changedTouches[0].clientX - startX;
                if (movedBy < -50) {
                    moveToCarouselSlide(currentCarouselIndex + 1);
                } else if (movedBy > 50) {
                    moveToCarouselSlide(currentCarouselIndex - 1);
                } else {
                    moveToCarouselSlide(currentCarouselIndex);
                }
                startX = 0; // Reset startX
                resetAutoSlide();
            });
        }
        startAutoSlide(); // Start auto-slide for Trayectoria
        moveToCarouselSlide(currentCarouselIndex); // Ensure initial position is correct
    }

    function moveToCarouselSlide(index) {
        if (carouselContentData.length === 0) return;
        let newIndex = index;
        const slidesPerView = getTrayectoriaSlidesPerView();
        const totalSlides = carouselContentData.length;

        // Calculate max possible index to prevent scrolling past the end of content
        const maxIndex = Math.max(0, totalSlides - slidesPerView);

        if (newIndex < 0) {
            newIndex = maxIndex; // Wrap around to last possible visible set
        } else if (newIndex > maxIndex) {
            newIndex = 0; // Wrap around to beginning
        }
        
        currentCarouselIndex = newIndex;
        const slideWidth = carouselTrack.firstElementChild ? carouselTrack.firstElementChild.offsetWidth : 0;
        carouselTrack.style.transform = `translateX(-${currentCarouselIndex * slideWidth}px)`;
        updateCarouselDots();
    }

    function getTrayectoriaSlidesPerView() {
        if (window.innerWidth >= 1024) return 3; // lg
        if (window.innerWidth >= 768) return 2;  // md
        return 1; // default for mobile
    }

    function updateCarouselDots() {
        if (!carouselDotsContainer) return;
        carouselDotsContainer.querySelectorAll('.carousel-dot').forEach((dot, idx) => {
            dot.classList.remove('bg-white');
            dot.classList.add('bg-gray-400');
            // Highlight the dot corresponding to the *first* visible slide
            if (idx === currentCarouselIndex) {
                dot.classList.add('bg-white');
            }
        });
    }

    function startAutoSlide() {
        clearInterval(autoSlideInterval); // Clear any existing interval
        autoSlideInterval = setInterval(() => {
            moveToCarouselSlide(currentCarouselIndex + 1);
        }, 5000); // Change slide every 5 seconds
    }

    function resetAutoSlide() {
        startAutoSlide();
    }

    // Fetch timeline data
    fetch('timeline-data.json')
        .then(response => {
            console.log('Respuesta de timeline-data.json recibida. OK:', response.ok);
            if (!response.ok) {
                console.error(`Error HTTP al cargar timeline-data.json: status ${response.status}`);
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            carouselContentData = data;
            console.log('Datos de Trayectoria cargados:', carouselContentData);
            initializeCarousel(); // Initialize Trayectoria carousel with fetched data
        })
        .catch(error => console.error('Error al cargar los datos del carrusel de Trayectoria:', error));


    // --- Funciones del Carrusel (Pensamiento y Acción) ---
    function initializeContentCarousel() {
        console.log('Iniciando initializeContentCarousel (Pensamiento y Acción)...');
        if (!contentCarouselTrack || !contentCarouselDotsContainer) {
            console.warn("No se pudo inicializar el carrusel de Pensamiento y Acción: elementos DOM no encontrados.");
            console.log('Estado actual - contentCarouselTrack:', contentCarouselTrack, 'contentCarouselDotsContainer:', contentCarouselDotsContainer);
            return;
        }
        console.log('Inicializando carrusel de Pensamiento y Acción con', filteredContentData.length, 'elementos.');

        contentCarouselTrack.innerHTML = '';
        contentCarouselDotsContainer.innerHTML = '';

        if (filteredContentData.length === 0) {
            contentCarouselTrack.innerHTML = '<p class="text-center text-lg text-deep-charcoal w-full py-10">No hay contenido disponible para esta categoría.</p>';
            // Hide carousel navigation if no content
            if(contentCarouselPrev) contentCarouselPrev.style.display = 'none';
            if(contentCarouselNext) contentCarouselNext.style.display = 'none';
            return;
        } else {
            if(contentCarouselPrev) contentCarouselPrev.style.display = 'flex';
            if(contentCarouselNext) contentCarouselNext.style.display = 'flex';
        }

        filteredContentData.forEach((item, index) => {
            const slide = document.createElement('div');
            slide.className = 'content-carousel-slide flex-none p-4 box-border'; // Added p-4 for internal spacing
            // Width is now controlled by CSS (main.min.css)
            slide.innerHTML = `
                <div class="content-item bg-white rounded-lg shadow-md overflow-hidden transform transition-transform duration-300 hover:scale-105 h-full flex flex-col">
                    <img src="${item.image}" alt="${item.title}" class="w-full h-48 object-cover">
                    <div class="content-item-body p-6 flex-grow flex flex-col">
                        <h3>${item.title}</h3>
                        <p class="flex-grow">${item.description}</p>
                        <a href="${item.link}" target="_blank" rel="noopener noreferrer" class="inline-block bg-deep-charcoal text-white px-4 py-2 rounded-full text-sm font-semibold hover:bg-dark-gold transition-colors duration-300 mt-4 self-start">Ver Más</a>
                    </div>
                </div>
            `;
            contentCarouselTrack.appendChild(slide);
            console.log(`Slide de Contenido ${index} (${item.category}) añadido.`);


            const dot = document.createElement('span');
            dot.className = 'carousel-dot w-3 h-3 bg-gray-400 rounded-full cursor-pointer transition-colors duration-200';
            if (index === 0) dot.classList.add('bg-white');
            dot.addEventListener('click', () => {
                moveToContentCarouselSlide(index);
            });
            contentCarouselDotsContainer.appendChild(dot);
        });

        // Add event listeners for Pensamiento y Acción carousel buttons
        if (contentCarouselPrev) contentCarouselPrev.addEventListener('click', () => {
            moveToContentCarouselSlide(currentContentCarouselIndex - 1);
        });
        if (contentCarouselNext) contentCarouselNext.addEventListener('click', () => {
            moveToContentCarouselSlide(currentContentCarouselIndex + 1);
        });

        // Add swipe support for Content Carousel
        let contentStartX = 0;
        let isContentDragging = false;
        if (contentCarouselTrack) {
            contentCarouselTrack.addEventListener('mousedown', (e) => {
                isContentDragging = true;
                contentStartX = e.clientX;
                contentCarouselTrack.style.transition = 'none';
            });

            contentCarouselTrack.addEventListener('mousemove', (e) => {
                if (!isContentDragging) return;
                const firstSlide = contentCarouselTrack.querySelector('.content-carousel-slide');
                if (!firstSlide) return;
                const slideWidth = firstSlide.offsetWidth;
                const walk = (e.clientX - contentStartX);
                contentCarouselTrack.style.transform = `translateX(${-currentContentCarouselIndex * slideWidth + walk}px)`;
            });

            contentCarouselTrack.addEventListener('mouseup', (e) => {
                if (!isContentDragging) return;
                isContentDragging = false;
                contentCarouselTrack.style.transition = 'transform 0.7s ease-in-out';
                const movedBy = e.clientX - contentStartX;
                if (movedBy < -50) { // Swiped left
                    moveToContentCarouselSlide(currentContentCarouselIndex + 1);
                } else if (movedBy > 50) { // Swiped right
                    moveToContentCarouselSlide(currentContentCarouselIndex - 1);
                } else { // Not enough swipe, snap back
                    moveToContentCarouselSlide(currentContentCarouselIndex);
                }
            });

            contentCarouselTrack.addEventListener('mouseleave', () => {
                if (isContentDragging) {
                    isContentDragging = false;
                    contentCarouselTrack.style.transition = 'transform 0.7s ease-in-out';
                    moveToContentCarouselSlide(currentContentCarouselIndex);
                }
            });

            // Touch events for mobile content carousel
            contentCarouselTrack.addEventListener('touchstart', (e) => {
                contentStartX = e.touches[0].clientX;
                contentCarouselTrack.style.transition = 'none';
            }, { passive: true }); // Added passive: true

            contentCarouselTrack.addEventListener('touchmove', (e) => {
                if (!contentStartX) return;
                const firstSlide = contentCarouselTrack.querySelector('.content-carousel-slide');
                if (!firstSlide) return;
                const slideWidth = firstSlide.offsetWidth;
                const walk = (e.touches[0].clientX - contentStartX);
                contentCarouselTrack.style.transform = `translateX(${-currentContentCarouselIndex * slideWidth + walk}px)`;
            }, { passive: true }); // Added passive: true

            contentCarouselTrack.addEventListener('touchend', (e) => {
                contentCarouselTrack.style.transition = 'transform 0.7s ease-in-out';
                const movedBy = e.changedTouches[0].clientX - contentStartX;
                if (movedBy < -50) {
                    moveToContentCarouselSlide(currentContentCarouselIndex + 1);
                } else if (movedBy > 50) {
                    moveToContentCarouselSlide(currentContentCarouselIndex - 1);
                } else {
                    moveToContentCarouselSlide(currentContentCarouselIndex);
                }
                contentStartX = 0;
            });
        }
        moveToContentCarouselSlide(currentContentCarouselIndex); // Ensure initial position is correct
    }

    function moveToContentCarouselSlide(index) {
        if (filteredContentData.length === 0) return;
        
        const slidesPerView = getContentSlidesPerView();
        const totalSlides = filteredContentData.length;
        
        let newIndex = index;

        // Calculate maximum possible index to prevent scrolling past the end
        const maxIndex = Math.max(0, totalSlides - slidesPerView); // Corrected: Math.max

        if (newIndex < 0) {
            newIndex = maxIndex; // Wrap around to last possible visible set
        } else if (newIndex > maxIndex) {
            newIndex = 0; // Wrap around to beginning
        }
        
        currentContentCarouselIndex = newIndex;
        updateContentCarouselPosition();
        updateContentCarouselDots();
    }

    function updateContentCarouselPosition() {
        if (!contentCarouselTrack || filteredContentData.length === 0) return;

        const firstSlide = contentCarouselTrack.querySelector('.content-carousel-slide');
        if (!firstSlide) return;
        const slideWidth = firstSlide.offsetWidth; // This accounts for padding and border due to box-sizing

        // Calculate translation, ensuring it's relative to the start of the track
        const translateX = currentContentCarouselIndex * slideWidth;
        contentCarouselTrack.style.transform = `translateX(-${translateX}px)`;
    }
    
    function updateContentCarouselDots() {
        if (!contentCarouselDotsContainer || filteredContentData.length === 0) return;
        const dots = contentCarouselDotsContainer.querySelectorAll('.carousel-dot');
        dots.forEach((dot, idx) => {
            dot.classList.remove('bg-white');
            dot.classList.add('bg-gray-400');
            // Highlight the dot corresponding to the *first* visible slide
            if (idx === currentContentCarouselIndex) {
                dot.classList.add('bg-white');
            }
        });
    }

    function getContentSlidesPerView() {
        if (window.innerWidth >= 1024) return 3; // lg
        if (window.innerWidth >= 768) return 2;  // md
        return 1; // default for mobile
    }

    // Fetch content data for Pensamiento y Acción
    fetch('content.json')
        .then(response => {
            console.log('Respuesta de content.json recibida. OK:', response.ok);
            if (!response.ok) {
                console.error(`Error HTTP al cargar content.json: status ${response.status}`);
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            contentData = data; // Store all content
            console.log('Datos de Pensamiento y Acción cargados:', contentData);
            filterContentCarousel('todos'); // Initialize with all content
            filterButtons.forEach(button => {
                button.addEventListener('click', () => {
                    filterContentCarousel(button.dataset.filter);
                });
            });
        })
        .catch(error => console.error('Error al cargar el contenido para Pensamiento y Acción:', error));

    function filterContentCarousel(category) {
        currentContentCarouselIndex = 0; // Reset index on filter change
        filteredContentData = category === 'todos' ? contentData : contentData.filter(item => item.category === category);
        console.log('Contenido filtrado para Pensamiento y Acción:', filteredContentData);
        initializeContentCarousel(); // Re-render the carousel with filtered data

        // Update active state for filter buttons
        filterButtons.forEach(btn => {
            if (btn.dataset.filter === category) {
                btn.classList.remove('bg-deep-charcoal');
                btn.classList.add('bg-dark-gold');
            } else {
                btn.classList.remove('bg-dark-gold');
                btn.classList.add('bg-deep-charcoal');
            }
        });
    }

    // --- Funciones generales de la página ---
    // Función para el menú móvil
    mobileMenuButton.addEventListener('click', function() {
        mobileMenu.classList.toggle('active');
        this.classList.toggle('active'); // Para animar el icono de hamburguesa
        // Añadir/quitar overflow-hidden al body cuando el menú está activo para evitar scroll
        document.body.classList.toggle('overflow-hidden', mobileMenu.classList.contains('active'));
    });

    // Función para cerrar el menú móvil
    function closeMobileMenu() {
        mobileMenu.classList.remove('active');
        mobileMenuButton.classList.remove('active');
        document.body.classList.remove('overflow-hidden');
    }

    // Ocultar el menú móvil y resetear el botón si la pantalla se redimensiona a desktop
    window.addEventListener('resize', function() {
        if (window.innerWidth >= 768) { // Si es desktop
            closeMobileMenu();
        }
        // Also update carousel positions on resize
        if (carouselTrack) {
            moveToCarouselSlide(currentCarouselIndex); // Re-position Trayectoria
        }
        if (contentCarouselTrack) {
            moveToContentCarouselSlide(currentContentCarouselIndex); // Re-position Pensamiento y Acción
        }
    });

    // Resaltar enlace de navegación activo al hacer scroll
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.5 // Ajusta este valor según cuánto de la sección debe estar visible
    };

    const sectionObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.dataset.section === entry.target.id) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }, observerOptions);

    sections.forEach(section => {
        sectionObserver.observe(section);
    });

    // --- Función para el desplazamiento suave para enlaces de anclaje ---
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
                const headerHeight = header ? header.offsetHeight : 0;
                window.scrollTo({
                    top: targetElement.offsetTop - headerHeight,
                    behavior: 'smooth'
                });
            }
            // Cerrar menú móvil si está abierto y el enlace clickeado es parte del menú móvil
            if (mobileMenu && mobileMenu.classList.contains('active')) {
                closeMobileMenu();
            }
        });
    });
});
