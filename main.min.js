document.addEventListener('DOMContentLoaded', function () {
    // --- Elementos del DOM ---
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const closeMobileMenuButton = document.getElementById('close-mobile-menu-button'); // Nuevo botón de cierre
    const header = document.getElementById('main-header');
    const sections = document.querySelectorAll('main section');
    const navLinks = document.querySelectorAll('.nav-link'); // Todos los enlaces de navegación
    const contentGrid = document.getElementById('content-grid');
    const filterButtons = document.querySelectorAll('.filter-btn');

    // --- Carrusel (Trayectoria) ---
    const carouselTrack = document.getElementById('carousel-track');
    const carouselPrev = document.getElementById('carousel-prev');
    const carouselNext = document.getElementById('carousel-next');
    const carouselDotsContainer = document.getElementById('carousel-dots');
    let currentIndex = 0;
    let autoSlideInterval;
    let startX = 0; // Para el swipe en móviles

    // Datos del carrusel: Se cargarán desde timeline-data.json
    let carouselContentData = [];

    // --- Funciones del Carrusel ---
    function initializeCarousel() {
        if (!carouselTrack || !carouselDotsContainer || carouselContentData.length === 0) {
            console.warn("No se pudo inicializar el carrusel: elementos DOM no encontrados o datos vacíos.");
            return;
        }
        renderCarouselItems();
        renderDots();
        showSlide(currentIndex); // Muestra el primer slide al inicio
        startAutoSlide(); // Inicia el auto-slide

        carouselPrev.addEventListener('click', () => {
            prevSlide();
            stopAutoSlide(); // Detiene el auto-slide al interactuar manualmente
            startAutoSlide(); // Reinicia el auto-slide
        });
        carouselNext.addEventListener('click', () => {
            nextSlide();
            stopAutoSlide(); // Detiene el auto-slide al interactuar manualmente
            startAutoSlide(); // Reinicia el auto-slide
        });

        // Touch events for carousel (swipe)
        carouselTrack.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            stopAutoSlide(); // Detiene el auto-slide durante el arrastre
        });

        carouselTrack.addEventListener('touchend', (e) => {
            const endX = e.changedTouches[0].clientX;
            const diffX = startX - endX;

            if (Math.abs(diffX) > 50) { // Umbral para un swipe
                if (diffX > 0) { // Swipe izquierda, ir al siguiente
                    nextSlide();
                } else { // Swipe derecha, ir al anterior
                    prevSlide();
                }
            }
            startAutoSlide(); // Reinicia el auto-slide después de la interacción
        });
    }

    function renderCarouselItems() {
        carouselTrack.innerHTML = ''; // Limpia elementos existentes
        carouselContentData.forEach(item => {
            const carouselItem = document.createElement('div');
            carouselItem.className = 'w-full flex-shrink-0 p-4'; // flex-shrink-0 es importante
            carouselItem.innerHTML = `
                <div class="bg-white rounded-lg shadow-lg p-6 max-w-lg mx-auto">
                    <img src="${item.image}" alt="${item.title}" class="w-full h-auto rounded-md mb-4">
                    <h3 class="text-2xl font-semibold text-dark-gold mb-2">${item.title}</h3>
                    <p class="text-deep-charcoal">${item.description}</p>
                    <span class="block mt-4 text-lg font-bold text-dark-gold">${item.year}</span>
                </div>
            `;
            carouselTrack.appendChild(carouselItem);
        });
    }

    function showSlide(index) {
        if (carouselContentData.length === 0) return; // Evita errores si no hay datos

        // Ajusta el índice para el ciclo infinito
        if (index < 0) {
            currentIndex = carouselContentData.length - 1;
        } else if (index >= carouselContentData.length) {
            currentIndex = 0;
        } else {
            currentIndex = index;
        }

        const offset = -currentIndex * 100;
        carouselTrack.style.transform = `translateX(${offset}%)`;
        updateDots(); // Actualiza el estado de los puntos de navegación
    }

    function goToSlide(index) {
        showSlide(index);
        stopAutoSlide();
        startAutoSlide();
    }

    function nextSlide() {
        showSlide(currentIndex + 1);
    }

    function prevSlide() {
        showSlide(currentIndex - 1);
    }

    function startAutoSlide() {
        stopAutoSlide(); // Limpia cualquier intervalo existente
        autoSlideInterval = setInterval(nextSlide, 5000); // Cambia slide cada 5 segundos
    }

    function stopAutoSlide() {
        clearInterval(autoSlideInterval);
    }

    function renderDots() {
        carouselDotsContainer.innerHTML = ''; // Limpia puntos existentes
        carouselDotsContainer.classList.add('carousel-dots'); // Agrega clase para estilos CSS
        carouselContentData.forEach((_, index) => {
            const dot = document.createElement('span');
            dot.className = 'dot w-3 h-3 bg-deep-charcoal rounded-full cursor-pointer opacity-50';
            dot.addEventListener('click', () => goToSlide(index));
            carouselDotsContainer.appendChild(dot);
        });
        updateDots(); // Actualiza el estado inicial de los puntos
    }

    function updateDots() {
        document.querySelectorAll('#carousel-dots .dot').forEach((dot, index) => {
            if (index === currentIndex) {
                dot.classList.add('active'); // CSS para el punto activo
            } else {
                dot.classList.remove('active');
            }
        });
    }

    // --- Funciones del Menú Móvil ---
    function openMobileMenu() {
        document.body.style.overflow = 'hidden'; // Evita scroll en el body cuando el menú está abierto
        mobileMenu.classList.add('active');
    }

    function closeMobileMenu() {
        document.body.style.overflow = ''; // Restaura scroll en el body
        mobileMenu.classList.remove('active');
    }

    function toggleMobileMenu() {
        if (mobileMenu.classList.contains('active')) {
            closeMobileMenu();
        } else {
            openMobileMenu();
        }
    }

    // --- Event Listeners Generales ---
    if (mobileMenuButton) {
        mobileMenuButton.addEventListener('click', toggleMobileMenu);
    }

    if (closeMobileMenuButton) { // Event listener para el nuevo botón de cierre
        closeMobileMenuButton.addEventListener('click', closeMobileMenu);
    }

    // Cierra el menú móvil cuando se hace clic en un enlace de navegación dentro de él
    document.querySelectorAll('#mobile-menu .nav-link').forEach(link => {
        link.addEventListener('click', closeMobileMenu);
    });

    // Cierra el menú móvil si el tamaño de la ventana se redimensiona a escritorio
    window.addEventListener('resize', function() {
        if (window.innerWidth >= 768) { // Coincide con el breakpoint 'md' de Tailwind
            if (mobileMenu.classList.contains('active')) {
                closeMobileMenu();
            }
        }
    });

    // --- Lógica de filtrado de contenido (Pensamiento y Acción) ---
    let contentData = [];

    function filterContent(category) {
        if (!contentGrid || !contentData.length) {
            console.warn("No se pudo filtrar el contenido: elemento DOM no encontrado o datos vacíos.");
            return;
        }

        contentGrid.innerHTML = ''; // Limpiar contenido existente

        const filtered = category === 'todos' ? contentData : contentData.filter(item => item.category === category);

        if (filtered.length === 0) {
            contentGrid.innerHTML = '<p class="text-center text-lg text-deep-charcoal col-span-full">No hay contenido disponible para esta categoría.</p>';
            return;
        }

        filtered.forEach(item => {
            const contentItem = document.createElement('div');
            contentItem.className = 'bg-white rounded-lg shadow-lg overflow-hidden';
            contentItem.innerHTML = `
                <img src="${item.image}" alt="${item.title}" class="w-full h-48 object-cover">
                <div class="p-6">
                    <h3 class="text-2xl font-semibold text-dark-gold mb-2">${item.title}</h3>
                    <p class="text-deep-charcoal mb-4">${item.description}</p>
                    <a href="${item.link}" target="_blank" rel="noopener noreferrer" class="inline-block bg-dark-gold text-deep-charcoal px-4 py-2 rounded-full hover:bg-muted-gold transition-colors">Leer más</a>
                </div>
            `;
            contentGrid.appendChild(contentItem);
        });

        // Actualiza el estado activo de los botones de filtro
        filterButtons.forEach(button => {
            if (button.dataset.filter === category) {
                button.classList.add('bg-dark-gold', 'text-deep-charcoal');
                button.classList.remove('bg-deep-charcoal', 'text-soft-cream');
            } else {
                button.classList.remove('bg-dark-gold', 'text-deep-charcoal');
                button.classList.add('bg-deep-charcoal', 'text-soft-cream');
            }
        });
    }

    // --- Función para el desplazamiento suave para enlaces de anclaje ---
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
                const headerHeight = header ? header.offsetHeight : 0;
                window.scrollTo({
                    top: targetElement.offsetTop - headerHeight,
                    behavior: 'smooth'
                });
            }
            // Cierra el menú móvil si está abierto y el enlace clickeado es parte del menú móvil
            if (mobileMenu && mobileMenu.classList.contains('active')) {
                closeMobileMenu();
            }
        });
    });

    // --- Manejo de la clase 'active' para los enlaces de navegación al hacer scroll ---
    const updateActiveNavLink = () => {
        const headerHeight = header ? header.offsetHeight : 0;
        let currentActiveSectionId = '';

        sections.forEach(section => {
            const sectionTop = section.offsetTop - headerHeight - 50; // Ajusta este valor si es necesario
            const sectionBottom = sectionTop + section.offsetHeight;

            if (window.scrollY >= sectionTop && window.scrollY < sectionBottom) {
                currentActiveSectionId = section.id;
            }
        });

        navLinks.forEach(link => {
            const href = link.getAttribute('href').substring(1);
            if (href === currentActiveSectionId) {
                // Estilo para enlaces activos en desktop y mobile
                link.classList.add('text-dark-gold');
                // Asegura el color de texto original para los inactivos
                if (link.closest('#desktop-nav')) {
                    link.classList.remove('text-deep-charcoal');
                } else if (link.closest('#mobile-menu')) {
                    link.classList.remove('text-soft-cream');
                }
            } else {
                // Restaura el estilo original para enlaces inactivos
                link.classList.remove('text-dark-gold');
                if (link.closest('#desktop-nav')) {
                    link.classList.add('text-deep-charcoal');
                } else if (link.closest('#mobile-menu')) {
                    link.classList.add('text-soft-cream');
                }
            }
        });
    };

    window.addEventListener('scroll', updateActiveNavLink);
    // Llamada inicial para establecer el enlace activo al cargar la página
    updateActiveNavLink();

    // --- Carga de datos del carrusel ---
    fetch('timeline-data.json')
        .then(response => {
            if (!response.ok) {
                // Lanza un error si la respuesta HTTP no es exitosa (ej. 404)
                throw new Error(`HTTP error! status: ${response.status} al cargar timeline-data.json`);
            }
            return response.json();
        })
        .then(data => {
            carouselContentData = data;
            initializeCarousel();
        })
        .catch(error => console.error('Error al cargar los datos de la línea de tiempo:', error));

    // --- Carga de datos del contenido (Pensamiento y Acción) ---
    fetch('content.json')
        .then(response => {
            if (!response.ok) {
                // Lanza un error si la respuesta HTTP no es exitosa (ej. 404)
                throw new Error(`HTTP error! status: ${response.status} al cargar content.json`);
            }
            return response.json();
        })
        .then(data => {
            contentData = data;
            filterContent('todos'); // Muestra todo al cargar
            filterButtons.forEach(button => {
                button.addEventListener('click', () => {
                    filterContent(button.dataset.filter);
                });
            });
        })
        .catch(error => console.error('Error al cargar el contenido para Pensamiento y Acción:', error));
});
